# Q1: Explain the primary differences between TensorFlow and PyTorch. When would you choose one over the other?

TensorFlow and PyTorch are both powerful deep learning frameworks. The main difference lies in their programming style:

TensorFlow uses a static computation graph (although tf.function now allows for more dynamic behavior), which can be optimized for production deployment.

PyTorch uses a dynamic computation graph, making it easier to debug and more Pythonic.

When to choose:

TensorFlow is preferred for production and deployment scenarios (e.g., using TensorFlow Lite or TensorFlow Serving).

PyTorch is preferred in research and rapid prototyping, thanks to its simplicity and flexibility.

# Q2: Describe two use cases for Jupyter Notebooks in AI development.

Exploratory Data Analysis (EDA):
Jupyter notebooks allow step-by-step data exploration with inline visualizations, making it easier to understand patterns in datasets.

Model Prototyping and Documentation:
They allow developers to build and test models quickly while documenting the workflow alongside, making it great for collaboration and presentations.

# Q3: How does spaCy enhance NLP tasks compared to basic Python string operations?

Answer:
spaCy provides pre-trained language models and linguistic features like part-of-speech tagging, named entity recognition (NER), and dependency parsing â€” tasks that are difficult to perform using only Python string methods. It is optimized for performance and production use, making NLP pipelines much more efficient and accurate.
