 Q1: Explain the primary differences between TensorFlow and PyTorch. When would you choose one over the other?
TensorFlow and PyTorch are both popular deep learning frameworks with distinct strengths:

TensorFlow:

Uses a static computation graph, which is optimized for deployment and production.

Offers tools like TensorFlow Lite and TensorFlow Serving for mobile and scalable applications.

Initially less intuitive but now supports some dynamic behavior with tf.function.

PyTorch:

Uses a dynamic computation graph, making it more Pythonic, easier to debug, and research-friendly.

Ideal for rapid prototyping and academic research.

When to choose:

‚úÖ Choose TensorFlow for production-ready models, scalable deployments, and integration with tools like TFLite or TensorFlow.js.

‚úÖ Choose PyTorch for research, experimentation, and ease of development.

‚ùì Q2: Describe two use cases for Jupyter Notebooks in AI development.
Exploratory Data Analysis (EDA):

Jupyter Notebooks allow you to visually explore datasets, run cell-by-cell analyses, and include inline plots and tables for deeper insights.

Model Prototyping and Documentation:

Ideal for writing, testing, and tuning machine learning models, while keeping code, visual output, and markdown notes in the same file for easy collaboration and communication.

‚ùì Q3: How does spaCy enhance NLP tasks compared to basic Python string operations?
spaCy provides advanced NLP capabilities such as:

üß† Part-of-Speech (POS) tagging

üè∑Ô∏è Named Entity Recognition (NER)

üîó Dependency Parsing

Unlike basic Python string methods, spaCy:

Uses pre-trained language models.

Offers faster processing and greater accuracy.

Is optimized for production-level NLP pipelines.

Handles linguistic nuances that simple .split() or .replace() operations cannot.
